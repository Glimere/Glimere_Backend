/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubSubcategory } from "./SubSubcategory";
import { SubSubcategoryCountArgs } from "./SubSubcategoryCountArgs";
import { SubSubcategoryFindManyArgs } from "./SubSubcategoryFindManyArgs";
import { SubSubcategoryFindUniqueArgs } from "./SubSubcategoryFindUniqueArgs";
import { CreateSubSubcategoryArgs } from "./CreateSubSubcategoryArgs";
import { UpdateSubSubcategoryArgs } from "./UpdateSubSubcategoryArgs";
import { DeleteSubSubcategoryArgs } from "./DeleteSubSubcategoryArgs";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { SubCategoryFindManyArgs } from "../../subCategory/base/SubCategoryFindManyArgs";
import { SubCategory } from "../../subCategory/base/SubCategory";
import { SubSubcategoryService } from "../subSubcategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubSubcategory)
export class SubSubcategoryResolverBase {
  constructor(
    protected readonly service: SubSubcategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "any",
  })
  async _subSubcategoriesMeta(
    @graphql.Args() args: SubSubcategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubSubcategory])
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "any",
  })
  async subSubcategories(
    @graphql.Args() args: SubSubcategoryFindManyArgs
  ): Promise<SubSubcategory[]> {
    return this.service.subSubcategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubSubcategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "own",
  })
  async subSubcategory(
    @graphql.Args() args: SubSubcategoryFindUniqueArgs
  ): Promise<SubSubcategory | null> {
    const result = await this.service.subSubcategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubSubcategory)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "create",
    possession: "any",
  })
  async createSubSubcategory(
    @graphql.Args() args: CreateSubSubcategoryArgs
  ): Promise<SubSubcategory> {
    return await this.service.createSubSubcategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubSubcategory)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async updateSubSubcategory(
    @graphql.Args() args: UpdateSubSubcategoryArgs
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.updateSubSubcategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubSubcategory)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "delete",
    possession: "any",
  })
  async deleteSubSubcategory(
    @graphql.Args() args: DeleteSubSubcategoryArgs
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.deleteSubSubcategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Apparel], { name: "apparel" })
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparel(
    @graphql.Parent() parent: SubSubcategory,
    @graphql.Args() args: ApparelFindManyArgs
  ): Promise<Apparel[]> {
    const results = await this.service.findApparel(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SubCategory], { name: "subCategories" })
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "read",
    possession: "any",
  })
  async findSubCategories(
    @graphql.Parent() parent: SubSubcategory,
    @graphql.Args() args: SubCategoryFindManyArgs
  ): Promise<SubCategory[]> {
    const results = await this.service.findSubCategories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
