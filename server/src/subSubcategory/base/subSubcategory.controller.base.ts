/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubSubcategoryService } from "../subSubcategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubSubcategoryCreateInput } from "./SubSubcategoryCreateInput";
import { SubSubcategory } from "./SubSubcategory";
import { SubSubcategoryFindManyArgs } from "./SubSubcategoryFindManyArgs";
import { SubSubcategoryWhereUniqueInput } from "./SubSubcategoryWhereUniqueInput";
import { SubSubcategoryUpdateInput } from "./SubSubcategoryUpdateInput";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { ApparelWhereUniqueInput } from "../../apparel/base/ApparelWhereUniqueInput";
import { SubCategoryFindManyArgs } from "../../subCategory/base/SubCategoryFindManyArgs";
import { SubCategory } from "../../subCategory/base/SubCategory";
import { SubCategoryWhereUniqueInput } from "../../subCategory/base/SubCategoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubSubcategoryControllerBase {
  constructor(
    protected readonly service: SubSubcategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubSubcategory })
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubSubcategory(
    @common.Body() data: SubSubcategoryCreateInput
  ): Promise<SubSubcategory> {
    return await this.service.createSubSubcategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubSubcategory] })
  @ApiNestedQuery(SubSubcategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subSubcategories(
    @common.Req() request: Request
  ): Promise<SubSubcategory[]> {
    const args = plainToClass(SubSubcategoryFindManyArgs, request.query);
    return this.service.subSubcategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<SubSubcategory | null> {
    const result = await this.service.subSubcategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() data: SubSubcategoryUpdateInput
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.updateSubSubcategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.deleteSubSubcategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apparel")
  @ApiNestedQuery(ApparelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparel(
    @common.Req() request: Request,
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<Apparel[]> {
    const query = plainToClass(ApparelFindManyArgs, request.query);
    const results = await this.service.findApparel(params.id, {
      ...query,
      select: {
        apparelDesc: true,
        apparelName: true,
        apparelPrice: true,

        apparelType: {
          select: {
            id: true,
          },
        },

        brand: {
          select: {
            id: true,
          },
        },

        cartItem: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountedPrice: true,
        discountEndDate: true,
        discountPercentage: true,
        discountStartDate: true,
        id: true,
        isDiscounted: true,

        mainCategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wishlistItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async connectApparel(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        connect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async updateApparel(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        set: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async disconnectApparel(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        disconnect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subCategories")
  @ApiNestedQuery(SubCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "read",
    possession: "any",
  })
  async findSubCategories(
    @common.Req() request: Request,
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<SubCategory[]> {
    const query = plainToClass(SubCategoryFindManyArgs, request.query);
    const results = await this.service.findSubCategories(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subCategories")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async connectSubCategories(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategories: {
        connect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subCategories")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async updateSubCategories(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategories: {
        set: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subCategories")
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "update",
    possession: "any",
  })
  async disconnectSubCategories(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategories: {
        disconnect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
