/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubSubcategory, // @ts-ignore
  Apparel, // @ts-ignore
  SubCategory,
} from "@prisma/client";

export class SubSubcategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SubSubcategoryCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryCountArgs>
  ): Promise<number> {
    return this.prisma.subSubcategory.count(args);
  }

  async subSubcategories<T extends Prisma.SubSubcategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryFindManyArgs>
  ): Promise<SubSubcategory[]> {
    return this.prisma.subSubcategory.findMany(args);
  }
  async subSubcategory<T extends Prisma.SubSubcategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryFindUniqueArgs>
  ): Promise<SubSubcategory | null> {
    return this.prisma.subSubcategory.findUnique(args);
  }
  async createSubSubcategory<T extends Prisma.SubSubcategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryCreateArgs>
  ): Promise<SubSubcategory> {
    return this.prisma.subSubcategory.create<T>(args);
  }
  async updateSubSubcategory<T extends Prisma.SubSubcategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryUpdateArgs>
  ): Promise<SubSubcategory> {
    return this.prisma.subSubcategory.update<T>(args);
  }
  async deleteSubSubcategory<T extends Prisma.SubSubcategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubSubcategoryDeleteArgs>
  ): Promise<SubSubcategory> {
    return this.prisma.subSubcategory.delete(args);
  }

  async findApparel(
    parentId: string,
    args: Prisma.ApparelFindManyArgs
  ): Promise<Apparel[]> {
    return this.prisma.subSubcategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apparel(args);
  }

  async findSubCategories(
    parentId: string,
    args: Prisma.SubCategoryFindManyArgs
  ): Promise<SubCategory[]> {
    return this.prisma.subSubcategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subCategories(args);
  }
}
