/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WishlistItems } from "./WishlistItems";
import { WishlistItemsCountArgs } from "./WishlistItemsCountArgs";
import { WishlistItemsFindManyArgs } from "./WishlistItemsFindManyArgs";
import { WishlistItemsFindUniqueArgs } from "./WishlistItemsFindUniqueArgs";
import { CreateWishlistItemsArgs } from "./CreateWishlistItemsArgs";
import { UpdateWishlistItemsArgs } from "./UpdateWishlistItemsArgs";
import { DeleteWishlistItemsArgs } from "./DeleteWishlistItemsArgs";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { Wishlist } from "../../wishlist/base/Wishlist";
import { WishlistItemsService } from "../wishlistItems.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WishlistItems)
export class WishlistItemsResolverBase {
  constructor(
    protected readonly service: WishlistItemsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "read",
    possession: "any",
  })
  async _wishlistItemsItemsMeta(
    @graphql.Args() args: WishlistItemsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WishlistItems])
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "read",
    possession: "any",
  })
  async wishlistItemsItems(
    @graphql.Args() args: WishlistItemsFindManyArgs
  ): Promise<WishlistItems[]> {
    return this.service.wishlistItemsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WishlistItems, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "read",
    possession: "own",
  })
  async wishlistItems(
    @graphql.Args() args: WishlistItemsFindUniqueArgs
  ): Promise<WishlistItems | null> {
    const result = await this.service.wishlistItems(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WishlistItems)
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "create",
    possession: "any",
  })
  async createWishlistItems(
    @graphql.Args() args: CreateWishlistItemsArgs
  ): Promise<WishlistItems> {
    return await this.service.createWishlistItems({
      ...args,
      data: {
        ...args.data,

        wishlist: args.data.wishlist
          ? {
              connect: args.data.wishlist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WishlistItems)
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "update",
    possession: "any",
  })
  async updateWishlistItems(
    @graphql.Args() args: UpdateWishlistItemsArgs
  ): Promise<WishlistItems | null> {
    try {
      return await this.service.updateWishlistItems({
        ...args,
        data: {
          ...args.data,

          wishlist: args.data.wishlist
            ? {
                connect: args.data.wishlist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WishlistItems)
  @nestAccessControl.UseRoles({
    resource: "WishlistItems",
    action: "delete",
    possession: "any",
  })
  async deleteWishlistItems(
    @graphql.Args() args: DeleteWishlistItemsArgs
  ): Promise<WishlistItems | null> {
    try {
      return await this.service.deleteWishlistItems(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Apparel], { name: "apparels" })
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparels(
    @graphql.Parent() parent: WishlistItems,
    @graphql.Args() args: ApparelFindManyArgs
  ): Promise<Apparel[]> {
    const results = await this.service.findApparels(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wishlist, {
    nullable: true,
    name: "wishlist",
  })
  @nestAccessControl.UseRoles({
    resource: "Wishlist",
    action: "read",
    possession: "any",
  })
  async getWishlist(
    @graphql.Parent() parent: WishlistItems
  ): Promise<Wishlist | null> {
    const result = await this.service.getWishlist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
