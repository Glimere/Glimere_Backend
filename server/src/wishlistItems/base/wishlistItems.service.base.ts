/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WishlistItems, // @ts-ignore
  Apparel, // @ts-ignore
  Wishlist,
} from "@prisma/client";

export class WishlistItemsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.WishlistItemsCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsCountArgs>
  ): Promise<number> {
    return this.prisma.wishlistItems.count(args);
  }

  async wishlistItemsItems<T extends Prisma.WishlistItemsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsFindManyArgs>
  ): Promise<WishlistItems[]> {
    return this.prisma.wishlistItems.findMany(args);
  }
  async wishlistItems<T extends Prisma.WishlistItemsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsFindUniqueArgs>
  ): Promise<WishlistItems | null> {
    return this.prisma.wishlistItems.findUnique(args);
  }
  async createWishlistItems<T extends Prisma.WishlistItemsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsCreateArgs>
  ): Promise<WishlistItems> {
    return this.prisma.wishlistItems.create<T>(args);
  }
  async updateWishlistItems<T extends Prisma.WishlistItemsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsUpdateArgs>
  ): Promise<WishlistItems> {
    return this.prisma.wishlistItems.update<T>(args);
  }
  async deleteWishlistItems<T extends Prisma.WishlistItemsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WishlistItemsDeleteArgs>
  ): Promise<WishlistItems> {
    return this.prisma.wishlistItems.delete(args);
  }

  async findApparels(
    parentId: string,
    args: Prisma.ApparelFindManyArgs
  ): Promise<Apparel[]> {
    return this.prisma.wishlistItems
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apparels(args);
  }

  async getWishlist(parentId: string): Promise<Wishlist | null> {
    return this.prisma.wishlistItems
      .findUnique({
        where: { id: parentId },
      })
      .wishlist();
  }
}
