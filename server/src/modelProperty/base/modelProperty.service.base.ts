/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModelProperty, // @ts-ignore
  Model,
} from "@prisma/client";

export class ModelPropertyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ModelPropertyCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyCountArgs>
  ): Promise<number> {
    return this.prisma.modelProperty.count(args);
  }

  async modelProperties<T extends Prisma.ModelPropertyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyFindManyArgs>
  ): Promise<ModelProperty[]> {
    return this.prisma.modelProperty.findMany(args);
  }
  async modelProperty<T extends Prisma.ModelPropertyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyFindUniqueArgs>
  ): Promise<ModelProperty | null> {
    return this.prisma.modelProperty.findUnique(args);
  }
  async createModelProperty<T extends Prisma.ModelPropertyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyCreateArgs>
  ): Promise<ModelProperty> {
    return this.prisma.modelProperty.create<T>(args);
  }
  async updateModelProperty<T extends Prisma.ModelPropertyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyUpdateArgs>
  ): Promise<ModelProperty> {
    return this.prisma.modelProperty.update<T>(args);
  }
  async deleteModelProperty<T extends Prisma.ModelPropertyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelPropertyDeleteArgs>
  ): Promise<ModelProperty> {
    return this.prisma.modelProperty.delete(args);
  }

  async getModels(parentId: string): Promise<Model | null> {
    return this.prisma.modelProperty
      .findUnique({
        where: { id: parentId },
      })
      .models();
  }
}
