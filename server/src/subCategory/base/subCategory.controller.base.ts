/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubCategoryService } from "../subCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubCategoryCreateInput } from "./SubCategoryCreateInput";
import { SubCategory } from "./SubCategory";
import { SubCategoryFindManyArgs } from "./SubCategoryFindManyArgs";
import { SubCategoryWhereUniqueInput } from "./SubCategoryWhereUniqueInput";
import { SubCategoryUpdateInput } from "./SubCategoryUpdateInput";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { ApparelWhereUniqueInput } from "../../apparel/base/ApparelWhereUniqueInput";
import { MainCategoryFindManyArgs } from "../../mainCategory/base/MainCategoryFindManyArgs";
import { MainCategory } from "../../mainCategory/base/MainCategory";
import { MainCategoryWhereUniqueInput } from "../../mainCategory/base/MainCategoryWhereUniqueInput";
import { SubSubcategoryFindManyArgs } from "../../subSubcategory/base/SubSubcategoryFindManyArgs";
import { SubSubcategory } from "../../subSubcategory/base/SubSubcategory";
import { SubSubcategoryWhereUniqueInput } from "../../subSubcategory/base/SubSubcategoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubCategoryControllerBase {
  constructor(
    protected readonly service: SubCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubCategory })
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubCategory(
    @common.Body() data: SubCategoryCreateInput
  ): Promise<SubCategory> {
    return await this.service.createSubCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubCategory] })
  @ApiNestedQuery(SubCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subCategories(@common.Req() request: Request): Promise<SubCategory[]> {
    const args = plainToClass(SubCategoryFindManyArgs, request.query);
    return this.service.subCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subCategory(
    @common.Param() params: SubCategoryWhereUniqueInput
  ): Promise<SubCategory | null> {
    const result = await this.service.subCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubCategory(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() data: SubCategoryUpdateInput
  ): Promise<SubCategory | null> {
    try {
      return await this.service.updateSubCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubCategory(
    @common.Param() params: SubCategoryWhereUniqueInput
  ): Promise<SubCategory | null> {
    try {
      return await this.service.deleteSubCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apparel")
  @ApiNestedQuery(ApparelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparel(
    @common.Req() request: Request,
    @common.Param() params: SubCategoryWhereUniqueInput
  ): Promise<Apparel[]> {
    const query = plainToClass(ApparelFindManyArgs, request.query);
    const results = await this.service.findApparel(params.id, {
      ...query,
      select: {
        apparelDesc: true,
        apparelName: true,
        apparelPrice: true,

        apparelType: {
          select: {
            id: true,
          },
        },

        brand: {
          select: {
            id: true,
          },
        },

        cartItem: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountedPrice: true,
        discountEndDate: true,
        discountPercentage: true,
        discountStartDate: true,
        id: true,
        isDiscounted: true,

        mainCategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wishlistItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async connectApparel(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        connect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async updateApparel(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        set: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apparel")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async disconnectApparel(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparel: {
        disconnect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mainCategories")
  @ApiNestedQuery(MainCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "read",
    possession: "any",
  })
  async findMainCategories(
    @common.Req() request: Request,
    @common.Param() params: SubCategoryWhereUniqueInput
  ): Promise<MainCategory[]> {
    const query = plainToClass(MainCategoryFindManyArgs, request.query);
    const results = await this.service.findMainCategories(params.id, {
      ...query,
      select: {
        cover: true,
        createdAt: true,
        id: true,
        name: true,
        pluralName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mainCategories")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async connectMainCategories(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: MainCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mainCategories: {
        connect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mainCategories")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async updateMainCategories(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: MainCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mainCategories: {
        set: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mainCategories")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async disconnectMainCategories(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: MainCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mainCategories: {
        disconnect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subSubcategory")
  @ApiNestedQuery(SubSubcategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubSubcategory",
    action: "read",
    possession: "any",
  })
  async findSubSubcategory(
    @common.Req() request: Request,
    @common.Param() params: SubCategoryWhereUniqueInput
  ): Promise<SubSubcategory[]> {
    const query = plainToClass(SubSubcategoryFindManyArgs, request.query);
    const results = await this.service.findSubSubcategory(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subSubcategory")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async connectSubSubcategory(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategory: {
        connect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subSubcategory")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async updateSubSubcategory(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategory: {
        set: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subSubcategory")
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "update",
    possession: "any",
  })
  async disconnectSubSubcategory(
    @common.Param() params: SubCategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategory: {
        disconnect: body,
      },
    };
    await this.service.updateSubCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
