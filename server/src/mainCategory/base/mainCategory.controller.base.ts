/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MainCategoryService } from "../mainCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MainCategoryCreateInput } from "./MainCategoryCreateInput";
import { MainCategory } from "./MainCategory";
import { MainCategoryFindManyArgs } from "./MainCategoryFindManyArgs";
import { MainCategoryWhereUniqueInput } from "./MainCategoryWhereUniqueInput";
import { MainCategoryUpdateInput } from "./MainCategoryUpdateInput";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { ApparelWhereUniqueInput } from "../../apparel/base/ApparelWhereUniqueInput";
import { SubCategoryFindManyArgs } from "../../subCategory/base/SubCategoryFindManyArgs";
import { SubCategory } from "../../subCategory/base/SubCategory";
import { SubCategoryWhereUniqueInput } from "../../subCategory/base/SubCategoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MainCategoryControllerBase {
  constructor(
    protected readonly service: MainCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MainCategory })
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMainCategory(
    @common.Body() data: MainCategoryCreateInput
  ): Promise<MainCategory> {
    return await this.service.createMainCategory({
      data: data,
      select: {
        cover: true,
        createdAt: true,
        id: true,
        name: true,
        pluralName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MainCategory] })
  @ApiNestedQuery(MainCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mainCategories(
    @common.Req() request: Request
  ): Promise<MainCategory[]> {
    const args = plainToClass(MainCategoryFindManyArgs, request.query);
    return this.service.mainCategories({
      ...args,
      select: {
        cover: true,
        createdAt: true,
        id: true,
        name: true,
        pluralName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MainCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mainCategory(
    @common.Param() params: MainCategoryWhereUniqueInput
  ): Promise<MainCategory | null> {
    const result = await this.service.mainCategory({
      where: params,
      select: {
        cover: true,
        createdAt: true,
        id: true,
        name: true,
        pluralName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MainCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMainCategory(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() data: MainCategoryUpdateInput
  ): Promise<MainCategory | null> {
    try {
      return await this.service.updateMainCategory({
        where: params,
        data: data,
        select: {
          cover: true,
          createdAt: true,
          id: true,
          name: true,
          pluralName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MainCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMainCategory(
    @common.Param() params: MainCategoryWhereUniqueInput
  ): Promise<MainCategory | null> {
    try {
      return await this.service.deleteMainCategory({
        where: params,
        select: {
          cover: true,
          createdAt: true,
          id: true,
          name: true,
          pluralName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apparels")
  @ApiNestedQuery(ApparelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparels(
    @common.Req() request: Request,
    @common.Param() params: MainCategoryWhereUniqueInput
  ): Promise<Apparel[]> {
    const query = plainToClass(ApparelFindManyArgs, request.query);
    const results = await this.service.findApparels(params.id, {
      ...query,
      select: {
        apparelDesc: true,
        apparelName: true,
        apparelPrice: true,

        apparelType: {
          select: {
            id: true,
          },
        },

        brand: {
          select: {
            id: true,
          },
        },

        cartItem: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountedPrice: true,
        discountEndDate: true,
        discountPercentage: true,
        discountStartDate: true,
        id: true,
        isDiscounted: true,

        mainCategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wishlistItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async connectApparels(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        connect: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async updateApparels(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        set: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async disconnectApparels(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        disconnect: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subCategory")
  @ApiNestedQuery(SubCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubCategory",
    action: "read",
    possession: "any",
  })
  async findSubCategory(
    @common.Req() request: Request,
    @common.Param() params: MainCategoryWhereUniqueInput
  ): Promise<SubCategory[]> {
    const query = plainToClass(SubCategoryFindManyArgs, request.query);
    const results = await this.service.findSubCategory(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subCategory")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async connectSubCategory(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategory: {
        connect: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subCategory")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async updateSubCategory(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategory: {
        set: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subCategory")
  @nestAccessControl.UseRoles({
    resource: "MainCategory",
    action: "update",
    possession: "any",
  })
  async disconnectSubCategory(
    @common.Param() params: MainCategoryWhereUniqueInput,
    @common.Body() body: SubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subCategory: {
        disconnect: body,
      },
    };
    await this.service.updateMainCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
