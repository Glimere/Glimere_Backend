/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SizingUnit } from "./SizingUnit";
import { SizingUnitCountArgs } from "./SizingUnitCountArgs";
import { SizingUnitFindManyArgs } from "./SizingUnitFindManyArgs";
import { SizingUnitFindUniqueArgs } from "./SizingUnitFindUniqueArgs";
import { CreateSizingUnitArgs } from "./CreateSizingUnitArgs";
import { UpdateSizingUnitArgs } from "./UpdateSizingUnitArgs";
import { DeleteSizingUnitArgs } from "./DeleteSizingUnitArgs";
import { MeasurementFindManyArgs } from "../../measurement/base/MeasurementFindManyArgs";
import { Measurement } from "../../measurement/base/Measurement";
import { SizingUnitService } from "../sizingUnit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SizingUnit)
export class SizingUnitResolverBase {
  constructor(
    protected readonly service: SizingUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "read",
    possession: "any",
  })
  async _sizingUnitsMeta(
    @graphql.Args() args: SizingUnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SizingUnit])
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "read",
    possession: "any",
  })
  async sizingUnits(
    @graphql.Args() args: SizingUnitFindManyArgs
  ): Promise<SizingUnit[]> {
    return this.service.sizingUnits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SizingUnit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "read",
    possession: "own",
  })
  async sizingUnit(
    @graphql.Args() args: SizingUnitFindUniqueArgs
  ): Promise<SizingUnit | null> {
    const result = await this.service.sizingUnit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SizingUnit)
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "create",
    possession: "any",
  })
  async createSizingUnit(
    @graphql.Args() args: CreateSizingUnitArgs
  ): Promise<SizingUnit> {
    return await this.service.createSizingUnit({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SizingUnit)
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "update",
    possession: "any",
  })
  async updateSizingUnit(
    @graphql.Args() args: UpdateSizingUnitArgs
  ): Promise<SizingUnit | null> {
    try {
      return await this.service.updateSizingUnit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SizingUnit)
  @nestAccessControl.UseRoles({
    resource: "SizingUnit",
    action: "delete",
    possession: "any",
  })
  async deleteSizingUnit(
    @graphql.Args() args: DeleteSizingUnitArgs
  ): Promise<SizingUnit | null> {
    try {
      return await this.service.deleteSizingUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Measurement], { name: "measurements" })
  @nestAccessControl.UseRoles({
    resource: "Measurement",
    action: "read",
    possession: "any",
  })
  async findMeasurements(
    @graphql.Parent() parent: SizingUnit,
    @graphql.Args() args: MeasurementFindManyArgs
  ): Promise<Measurement[]> {
    const results = await this.service.findMeasurements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
