/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SizingUnit, // @ts-ignore
  Measurement,
} from "@prisma/client";

export class SizingUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SizingUnitCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitCountArgs>
  ): Promise<number> {
    return this.prisma.sizingUnit.count(args);
  }

  async sizingUnits<T extends Prisma.SizingUnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitFindManyArgs>
  ): Promise<SizingUnit[]> {
    return this.prisma.sizingUnit.findMany(args);
  }
  async sizingUnit<T extends Prisma.SizingUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitFindUniqueArgs>
  ): Promise<SizingUnit | null> {
    return this.prisma.sizingUnit.findUnique(args);
  }
  async createSizingUnit<T extends Prisma.SizingUnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitCreateArgs>
  ): Promise<SizingUnit> {
    return this.prisma.sizingUnit.create<T>(args);
  }
  async updateSizingUnit<T extends Prisma.SizingUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitUpdateArgs>
  ): Promise<SizingUnit> {
    return this.prisma.sizingUnit.update<T>(args);
  }
  async deleteSizingUnit<T extends Prisma.SizingUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SizingUnitDeleteArgs>
  ): Promise<SizingUnit> {
    return this.prisma.sizingUnit.delete(args);
  }

  async findMeasurements(
    parentId: string,
    args: Prisma.MeasurementFindManyArgs
  ): Promise<Measurement[]> {
    return this.prisma.sizingUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .measurements(args);
  }
}
