/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Following, // @ts-ignore
  Brand, // @ts-ignore
  User,
} from "@prisma/client";

export class FollowingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.FollowingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingCountArgs>
  ): Promise<number> {
    return this.prisma.following.count(args);
  }

  async followings<T extends Prisma.FollowingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingFindManyArgs>
  ): Promise<Following[]> {
    return this.prisma.following.findMany(args);
  }
  async following<T extends Prisma.FollowingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingFindUniqueArgs>
  ): Promise<Following | null> {
    return this.prisma.following.findUnique(args);
  }
  async createFollowing<T extends Prisma.FollowingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingCreateArgs>
  ): Promise<Following> {
    return this.prisma.following.create<T>(args);
  }
  async updateFollowing<T extends Prisma.FollowingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingUpdateArgs>
  ): Promise<Following> {
    return this.prisma.following.update<T>(args);
  }
  async deleteFollowing<T extends Prisma.FollowingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FollowingDeleteArgs>
  ): Promise<Following> {
    return this.prisma.following.delete(args);
  }

  async getBrand(parentId: string): Promise<Brand | null> {
    return this.prisma.following
      .findUnique({
        where: { id: parentId },
      })
      .brand();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.following
      .findUnique({
        where: { id: parentId },
      })
      .User();
  }
}
