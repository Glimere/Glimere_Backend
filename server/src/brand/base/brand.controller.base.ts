/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BrandService } from "../brand.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BrandCreateInput } from "./BrandCreateInput";
import { Brand } from "./Brand";
import { BrandFindManyArgs } from "./BrandFindManyArgs";
import { BrandWhereUniqueInput } from "./BrandWhereUniqueInput";
import { BrandUpdateInput } from "./BrandUpdateInput";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { ApparelWhereUniqueInput } from "../../apparel/base/ApparelWhereUniqueInput";
import { FollowingFindManyArgs } from "../../following/base/FollowingFindManyArgs";
import { User } from "../../user/base/User";
import { Following } from "../../following/base/Following";
import { FollowingWhereUniqueInput } from "../../following/base/FollowingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BrandControllerBase {
  constructor(
    protected readonly service: BrandService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Brand })
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBrand(@common.Body() data: BrandCreateInput): Promise<Brand> {
    return await this.service.createBrand({
      data: data,
      select: {
        color: true,
        country: true,
        createdAt: true,
        desc: true,
        foundingdate: true,
        id: true,
        logo: true,
        name: true,
        shortName: true,
        state: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Brand] })
  @ApiNestedQuery(BrandFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async brands(@common.Req() request: Request): Promise<Brand[]> {
    const args = plainToClass(BrandFindManyArgs, request.query);
    return this.service.brands({
      ...args,
      select: {
        color: true,
        country: true,
        createdAt: true,
        desc: true,
        foundingdate: true,
        id: true,
        logo: true,
        name: true,
        shortName: true,
        state: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Brand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async brand(
    @common.Param() params: BrandWhereUniqueInput
  ): Promise<Brand | null> {
    const result = await this.service.brand({
      where: params,
      select: {
        color: true,
        country: true,
        createdAt: true,
        desc: true,
        foundingdate: true,
        id: true,
        logo: true,
        name: true,
        shortName: true,
        state: true,
        updatedAt: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Brand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBrand(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() data: BrandUpdateInput
  ): Promise<Brand | null> {
    try {
      return await this.service.updateBrand({
        where: params,
        data: data,
        select: {
          color: true,
          country: true,
          createdAt: true,
          desc: true,
          foundingdate: true,
          id: true,
          logo: true,
          name: true,
          shortName: true,
          state: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Brand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBrand(
    @common.Param() params: BrandWhereUniqueInput
  ): Promise<Brand | null> {
    try {
      return await this.service.deleteBrand({
        where: params,
        select: {
          color: true,
          country: true,
          createdAt: true,
          desc: true,
          foundingdate: true,
          id: true,
          logo: true,
          name: true,
          shortName: true,
          state: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apparels")
  @ApiNestedQuery(ApparelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparels(
    @common.Req() request: Request,
    @common.Param() params: BrandWhereUniqueInput
  ): Promise<Apparel[]> {
    const query = plainToClass(ApparelFindManyArgs, request.query);
    const results = await this.service.findApparels(params.id, {
      ...query,
      select: {
        apparelDesc: true,
        apparelName: true,
        apparelPrice: true,

        apparelType: {
          select: {
            id: true,
          },
        },

        brand: {
          select: {
            id: true,
          },
        },

        cartItem: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountedPrice: true,
        discountEndDate: true,
        discountPercentage: true,
        discountStartDate: true,
        id: true,
        isDiscounted: true,

        mainCategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wishlistItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async connectApparels(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        connect: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async updateApparels(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        set: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async disconnectApparels(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        disconnect: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/followings")
  @ApiNestedQuery(FollowingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Following",
    action: "read",
    possession: "any",
  })
  async findFollowings(
    @common.Req() request: Request,
    @common.Param() params: BrandWhereUniqueInput
  ): Promise<Following[]> {
    const query = plainToClass(FollowingFindManyArgs, request.query);
    const results = await this.service.findFollowings(params.id, {
      ...query,
      select: {
        brand: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        followedAt: true,
        id: true,
        updatedAt: true,

        User: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/followings")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async connectFollowings(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: FollowingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followings: {
        connect: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/followings")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async updateFollowings(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: FollowingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followings: {
        set: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/followings")
  @nestAccessControl.UseRoles({
    resource: "Brand",
    action: "update",
    possession: "any",
  })
  async disconnectFollowings(
    @common.Param() params: BrandWhereUniqueInput,
    @common.Body() body: FollowingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followings: {
        disconnect: body,
      },
    };
    await this.service.updateBrand({
      where: params,
      data,
      select: { id: true },
    });
  }
}
