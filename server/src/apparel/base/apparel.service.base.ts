/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Apparel, // @ts-ignore
  Material, // @ts-ignore
  Model, // @ts-ignore
  Review, // @ts-ignore
  Size, // @ts-ignore
  SubCategory, // @ts-ignore
  SubSubcategory, // @ts-ignore
  ApparelType, // @ts-ignore
  Brand, // @ts-ignore
  CartItem, // @ts-ignore
  MainCategory, // @ts-ignore
  WishlistItems,
} from "@prisma/client";

export class ApparelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApparelCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelCountArgs>
  ): Promise<number> {
    return this.prisma.apparel.count(args);
  }

  async apparels<T extends Prisma.ApparelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelFindManyArgs>
  ): Promise<Apparel[]> {
    return this.prisma.apparel.findMany(args);
  }
  async apparel<T extends Prisma.ApparelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelFindUniqueArgs>
  ): Promise<Apparel | null> {
    return this.prisma.apparel.findUnique(args);
  }
  async createApparel<T extends Prisma.ApparelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelCreateArgs>
  ): Promise<Apparel> {
    return this.prisma.apparel.create<T>(args);
  }
  async updateApparel<T extends Prisma.ApparelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelUpdateArgs>
  ): Promise<Apparel> {
    return this.prisma.apparel.update<T>(args);
  }
  async deleteApparel<T extends Prisma.ApparelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelDeleteArgs>
  ): Promise<Apparel> {
    return this.prisma.apparel.delete(args);
  }

  async findMaterials(
    parentId: string,
    args: Prisma.MaterialFindManyArgs
  ): Promise<Material[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .materials(args);
  }

  async findModels(
    parentId: string,
    args: Prisma.ModelFindManyArgs
  ): Promise<Model[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .models(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<Review[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findSizes(
    parentId: string,
    args: Prisma.SizeFindManyArgs
  ): Promise<Size[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sizes(args);
  }

  async findSubCategories(
    parentId: string,
    args: Prisma.SubCategoryFindManyArgs
  ): Promise<SubCategory[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subCategories(args);
  }

  async findSubSubcategories(
    parentId: string,
    args: Prisma.SubSubcategoryFindManyArgs
  ): Promise<SubSubcategory[]> {
    return this.prisma.apparel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subSubcategories(args);
  }

  async getApparelType(parentId: string): Promise<ApparelType | null> {
    return this.prisma.apparel
      .findUnique({
        where: { id: parentId },
      })
      .apparelType();
  }

  async getBrand(parentId: string): Promise<Brand | null> {
    return this.prisma.apparel
      .findUnique({
        where: { id: parentId },
      })
      .brand();
  }

  async getCartItem(parentId: string): Promise<CartItem | null> {
    return this.prisma.apparel
      .findUnique({
        where: { id: parentId },
      })
      .cartItem();
  }

  async getMainCategory(parentId: string): Promise<MainCategory | null> {
    return this.prisma.apparel
      .findUnique({
        where: { id: parentId },
      })
      .mainCategory();
  }

  async getWishlistItems(parentId: string): Promise<WishlistItems | null> {
    return this.prisma.apparel
      .findUnique({
        where: { id: parentId },
      })
      .wishlistItems();
  }
}
