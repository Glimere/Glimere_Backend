/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Apparel } from "./Apparel";
import { ApparelCountArgs } from "./ApparelCountArgs";
import { ApparelFindManyArgs } from "./ApparelFindManyArgs";
import { ApparelFindUniqueArgs } from "./ApparelFindUniqueArgs";
import { CreateApparelArgs } from "./CreateApparelArgs";
import { UpdateApparelArgs } from "./UpdateApparelArgs";
import { DeleteApparelArgs } from "./DeleteApparelArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { ApparelService } from "../apparel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Apparel)
export class ApparelResolverBase {
  constructor(
    protected readonly service: ApparelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async _apparelsMeta(
    @graphql.Args() args: ApparelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Apparel])
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async apparels(
    @graphql.Args() args: ApparelFindManyArgs
  ): Promise<Apparel[]> {
    return this.service.apparels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Apparel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "own",
  })
  async apparel(
    @graphql.Args() args: ApparelFindUniqueArgs
  ): Promise<Apparel | null> {
    const result = await this.service.apparel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Apparel)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "create",
    possession: "any",
  })
  async createApparel(
    @graphql.Args() args: CreateApparelArgs
  ): Promise<Apparel> {
    return await this.service.createApparel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Apparel)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "update",
    possession: "any",
  })
  async updateApparel(
    @graphql.Args() args: UpdateApparelArgs
  ): Promise<Apparel | null> {
    try {
      return await this.service.updateApparel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Apparel)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "delete",
    possession: "any",
  })
  async deleteApparel(
    @graphql.Args() args: DeleteApparelArgs
  ): Promise<Apparel | null> {
    try {
      return await this.service.deleteApparel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: Apparel,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
