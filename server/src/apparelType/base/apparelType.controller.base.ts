/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApparelTypeService } from "../apparelType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApparelTypeCreateInput } from "./ApparelTypeCreateInput";
import { ApparelType } from "./ApparelType";
import { ApparelTypeFindManyArgs } from "./ApparelTypeFindManyArgs";
import { ApparelTypeWhereUniqueInput } from "./ApparelTypeWhereUniqueInput";
import { ApparelTypeUpdateInput } from "./ApparelTypeUpdateInput";
import { ApparelFindManyArgs } from "../../apparel/base/ApparelFindManyArgs";
import { Apparel } from "../../apparel/base/Apparel";
import { ApparelWhereUniqueInput } from "../../apparel/base/ApparelWhereUniqueInput";
import { SizeFindManyArgs } from "../../size/base/SizeFindManyArgs";
import { Size } from "../../size/base/Size";
import { SizeWhereUniqueInput } from "../../size/base/SizeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApparelTypeControllerBase {
  constructor(
    protected readonly service: ApparelTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApparelType })
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApparelType(
    @common.Body() data: ApparelTypeCreateInput
  ): Promise<ApparelType> {
    return await this.service.createApparelType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ApparelType] })
  @ApiNestedQuery(ApparelTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apparelTypes(@common.Req() request: Request): Promise<ApparelType[]> {
    const args = plainToClass(ApparelTypeFindManyArgs, request.query);
    return this.service.apparelTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApparelType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apparelType(
    @common.Param() params: ApparelTypeWhereUniqueInput
  ): Promise<ApparelType | null> {
    const result = await this.service.apparelType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApparelType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApparelType(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() data: ApparelTypeUpdateInput
  ): Promise<ApparelType | null> {
    try {
      return await this.service.updateApparelType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApparelType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApparelType(
    @common.Param() params: ApparelTypeWhereUniqueInput
  ): Promise<ApparelType | null> {
    try {
      return await this.service.deleteApparelType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apparels")
  @ApiNestedQuery(ApparelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apparel",
    action: "read",
    possession: "any",
  })
  async findApparels(
    @common.Req() request: Request,
    @common.Param() params: ApparelTypeWhereUniqueInput
  ): Promise<Apparel[]> {
    const query = plainToClass(ApparelFindManyArgs, request.query);
    const results = await this.service.findApparels(params.id, {
      ...query,
      select: {
        apparelDesc: true,
        apparelName: true,
        apparelPrice: true,

        apparelType: {
          select: {
            id: true,
          },
        },

        brand: {
          select: {
            id: true,
          },
        },

        cartItem: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountedPrice: true,
        discountEndDate: true,
        discountPercentage: true,
        discountStartDate: true,
        id: true,
        isDiscounted: true,

        mainCategory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        wishlistItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async connectApparels(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        connect: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async updateApparels(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        set: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apparels")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async disconnectApparels(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: ApparelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apparels: {
        disconnect: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sizes")
  @ApiNestedQuery(SizeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Size",
    action: "read",
    possession: "any",
  })
  async findSizes(
    @common.Req() request: Request,
    @common.Param() params: ApparelTypeWhereUniqueInput
  ): Promise<Size[]> {
    const query = plainToClass(SizeFindManyArgs, request.query);
    const results = await this.service.findSizes(params.id, {
      ...query,
      select: {
        apparel: {
          select: {
            id: true,
          },
        },

        apparelType: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        measurements: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sizes")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async connectSizes(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: SizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sizes: {
        connect: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sizes")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async updateSizes(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: SizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sizes: {
        set: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sizes")
  @nestAccessControl.UseRoles({
    resource: "ApparelType",
    action: "update",
    possession: "any",
  })
  async disconnectSizes(
    @common.Param() params: ApparelTypeWhereUniqueInput,
    @common.Body() body: SizeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sizes: {
        disconnect: body,
      },
    };
    await this.service.updateApparelType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
