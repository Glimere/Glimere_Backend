/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApparelType, // @ts-ignore
  Apparel, // @ts-ignore
  Size,
} from "@prisma/client";

export class ApparelTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApparelTypeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeCountArgs>
  ): Promise<number> {
    return this.prisma.apparelType.count(args);
  }

  async apparelTypes<T extends Prisma.ApparelTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeFindManyArgs>
  ): Promise<ApparelType[]> {
    return this.prisma.apparelType.findMany(args);
  }
  async apparelType<T extends Prisma.ApparelTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeFindUniqueArgs>
  ): Promise<ApparelType | null> {
    return this.prisma.apparelType.findUnique(args);
  }
  async createApparelType<T extends Prisma.ApparelTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeCreateArgs>
  ): Promise<ApparelType> {
    return this.prisma.apparelType.create<T>(args);
  }
  async updateApparelType<T extends Prisma.ApparelTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeUpdateArgs>
  ): Promise<ApparelType> {
    return this.prisma.apparelType.update<T>(args);
  }
  async deleteApparelType<T extends Prisma.ApparelTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApparelTypeDeleteArgs>
  ): Promise<ApparelType> {
    return this.prisma.apparelType.delete(args);
  }

  async findApparels(
    parentId: string,
    args: Prisma.ApparelFindManyArgs
  ): Promise<Apparel[]> {
    return this.prisma.apparelType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apparels(args);
  }

  async findSizes(
    parentId: string,
    args: Prisma.SizeFindManyArgs
  ): Promise<Size[]> {
    return this.prisma.apparelType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sizes(args);
  }
}
