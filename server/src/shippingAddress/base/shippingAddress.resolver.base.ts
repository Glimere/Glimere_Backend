/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ShippingAddress } from "./ShippingAddress";
import { ShippingAddressCountArgs } from "./ShippingAddressCountArgs";
import { ShippingAddressFindManyArgs } from "./ShippingAddressFindManyArgs";
import { ShippingAddressFindUniqueArgs } from "./ShippingAddressFindUniqueArgs";
import { CreateShippingAddressArgs } from "./CreateShippingAddressArgs";
import { UpdateShippingAddressArgs } from "./UpdateShippingAddressArgs";
import { DeleteShippingAddressArgs } from "./DeleteShippingAddressArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { ShippingAddressService } from "../shippingAddress.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ShippingAddress)
export class ShippingAddressResolverBase {
  constructor(
    protected readonly service: ShippingAddressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "read",
    possession: "any",
  })
  async _shippingAddressesMeta(
    @graphql.Args() args: ShippingAddressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ShippingAddress])
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "read",
    possession: "any",
  })
  async shippingAddresses(
    @graphql.Args() args: ShippingAddressFindManyArgs
  ): Promise<ShippingAddress[]> {
    return this.service.shippingAddresses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ShippingAddress, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "read",
    possession: "own",
  })
  async shippingAddress(
    @graphql.Args() args: ShippingAddressFindUniqueArgs
  ): Promise<ShippingAddress | null> {
    const result = await this.service.shippingAddress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShippingAddress)
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "create",
    possession: "any",
  })
  async createShippingAddress(
    @graphql.Args() args: CreateShippingAddressArgs
  ): Promise<ShippingAddress> {
    return await this.service.createShippingAddress({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShippingAddress)
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "update",
    possession: "any",
  })
  async updateShippingAddress(
    @graphql.Args() args: UpdateShippingAddressArgs
  ): Promise<ShippingAddress | null> {
    try {
      return await this.service.updateShippingAddress({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShippingAddress)
  @nestAccessControl.UseRoles({
    resource: "ShippingAddress",
    action: "delete",
    possession: "any",
  })
  async deleteShippingAddress(
    @graphql.Args() args: DeleteShippingAddressArgs
  ): Promise<ShippingAddress | null> {
    try {
      return await this.service.deleteShippingAddress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: ShippingAddress,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
