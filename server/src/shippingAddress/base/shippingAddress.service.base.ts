/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ShippingAddress, // @ts-ignore
  User,
} from "@prisma/client";

export class ShippingAddressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ShippingAddressCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressCountArgs>
  ): Promise<number> {
    return this.prisma.shippingAddress.count(args);
  }

  async shippingAddresses<T extends Prisma.ShippingAddressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressFindManyArgs>
  ): Promise<ShippingAddress[]> {
    return this.prisma.shippingAddress.findMany(args);
  }
  async shippingAddress<T extends Prisma.ShippingAddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressFindUniqueArgs>
  ): Promise<ShippingAddress | null> {
    return this.prisma.shippingAddress.findUnique(args);
  }
  async createShippingAddress<T extends Prisma.ShippingAddressCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressCreateArgs>
  ): Promise<ShippingAddress> {
    return this.prisma.shippingAddress.create<T>(args);
  }
  async updateShippingAddress<T extends Prisma.ShippingAddressUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressUpdateArgs>
  ): Promise<ShippingAddress> {
    return this.prisma.shippingAddress.update<T>(args);
  }
  async deleteShippingAddress<T extends Prisma.ShippingAddressDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShippingAddressDeleteArgs>
  ): Promise<ShippingAddress> {
    return this.prisma.shippingAddress.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.shippingAddress
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
