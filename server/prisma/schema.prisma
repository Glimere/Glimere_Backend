datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  cards              Card[]
  carts              Cart[]
  createdAt          DateTime          @default(now())
  email              String?
  firstName          String?
  followings         Following[]
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  lastName           String?
  password           String
  reviews            Review[]
  roles              Json
  shippingAddress    ShippingAddress[] @relation(fields: [shippingAddressIds], references: [id])
  shippingAddressIds String[]          @db.ObjectId
  sizes              Size[]
  updatedAt          DateTime          @updatedAt
  username           String            @unique
  wishlists          Wishlist[]
}

model Order {
  createdAt  DateTime  @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.ObjectId
  discount   Float?
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int?
  totalPrice Int?
  updatedAt  DateTime  @updatedAt
}

model Customer {
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @db.ObjectId
  createdAt DateTime @default(now())
  email     String?
  firstName String?
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lastName  String?
  orders    Order[]
  phone     String?
  updatedAt DateTime @updatedAt
}

model Address {
  address_1 String?
  address_2 String?
  city      String?
  createdAt DateTime   @default(now())
  customers Customer[]
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  state     String?
  updatedAt DateTime   @updatedAt
  zip       Int?
}

model Apparel {
  apparelDesc         String?
  apparelName         String?
  apparelPrice        Float?
  apparelType         ApparelType?     @relation(fields: [apparelTypeId], references: [id])
  apparelTypeId       String?          @db.ObjectId
  brand               Brand?           @relation(fields: [brandId], references: [id])
  brandId             String?          @db.ObjectId
  cartItem            CartItem?        @relation(fields: [cartItemId], references: [id])
  cartItemId          String?          @db.ObjectId
  createdAt           DateTime         @default(now())
  discountedPrice     Float?
  discountEndDate     DateTime?
  discountPercentage  Int?
  discountStartDate   DateTime?
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  isDiscounted        Boolean?
  mainCategory        MainCategory?    @relation(fields: [mainCategoryId], references: [id])
  mainCategoryId      String?          @db.ObjectId
  materials           Material[]
  models              Model[]          @relation(fields: [modelsIds], references: [id])
  modelsIds           String[]         @db.ObjectId
  reviews             Review[]
  sizes               Size[]
  subCategories       SubCategory[]    @relation(fields: [subCategoriesIds], references: [id])
  subCategoriesIds    String[]         @db.ObjectId
  subSubcategories    SubSubcategory[] @relation(fields: [subSubcategoriesIds], references: [id])
  subSubcategoriesIds String[]         @db.ObjectId
  updatedAt           DateTime         @updatedAt
  wishlistItems       WishlistItems?   @relation(fields: [wishlistItemsId], references: [id])
  wishlistItemsId     String?          @db.ObjectId
}

model ApparelType {
  apparels  Apparel[]
  createdAt DateTime  @default(now())
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  sizes     Size[]
  updatedAt DateTime  @updatedAt
}

model Brand {
  apparels     Apparel[]
  color        String?
  country      String?
  createdAt    DateTime    @default(now())
  desc         String?
  followings   Following[]
  foundingdate DateTime?
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  logo         String?
  name         String?
  shortName    String?
  state        String?
  updatedAt    DateTime    @updatedAt
  website      String?
}

model Card {
  cardholderName  String?
  cardNumber      Int?
  cardType        String?
  createdAt       DateTime @default(now())
  cvv             Int?
  expirationMonth String?
  expirationYear  String?
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  isDefault       Boolean?
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?  @db.ObjectId
}

model Cart {
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId
}

model CartItem {
  apparelId Int?
  apparels  Apparel[]
  cart      Cart?     @relation(fields: [cartId], references: [id])
  cartId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int?
  updatedAt DateTime  @updatedAt
}

model Following {
  brand      Brand?    @relation(fields: [brandId], references: [id])
  brandId    String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  followedAt DateTime?
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [UserId], references: [id])
  UserId     String?   @db.ObjectId
}

model MainCategory {
  apparels       Apparel[]
  cover          String?
  createdAt      DateTime      @default(now())
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  pluralName     String?
  subCategory    SubCategory[] @relation(fields: [subCategoryIds], references: [id])
  subCategoryIds String[]      @db.ObjectId
  updatedAt      DateTime      @updatedAt
}

model SubCategory {
  apparel           Apparel[]        @relation(fields: [apparelIds], references: [id])
  apparelIds        String[]         @db.ObjectId
  createdAt         DateTime         @default(now())
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  mainCategories    MainCategory[]   @relation(fields: [mainCategoriesIds], references: [id])
  mainCategoriesIds String[]         @db.ObjectId
  subSubcategory    SubSubcategory[] @relation(fields: [subSubcategoryIds], references: [id])
  subSubcategoryIds String[]         @db.ObjectId
  updatedAt         DateTime         @updatedAt
}

model SubSubcategory {
  apparel          Apparel[]     @relation(fields: [apparelIds], references: [id])
  apparelIds       String[]      @db.ObjectId
  createdAt        DateTime      @default(now())
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  subCategories    SubCategory[] @relation(fields: [subCategoriesIds], references: [id])
  subCategoriesIds String[]      @db.ObjectId
  updatedAt        DateTime      @updatedAt
}

model Material {
  apparel                 Apparel? @relation(fields: [apparelId], references: [id])
  apparelId               String?  @db.ObjectId
  cost                    Int?
  createdAt               DateTime @default(now())
  environmentalImpact     Json?
  historyAndOrigin        String?
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  isNatural               Boolean?
  materialImg             String?
  materialName            String?
  properties              Json?
  sustainabilityPractices String?
  updatedAt               DateTime @updatedAt
}

model Review {
  apparel      Apparel?  @relation(fields: [apparelId], references: [id])
  apparelId    String?   @db.ObjectId
  comment      String?
  createdAt    DateTime  @default(now())
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  ratingNumber Int?
  reviewTime   DateTime?
  updatedAt    DateTime  @updatedAt
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?   @db.ObjectId
}

model ShippingAddress {
  addressName     String?
  city            String?
  country         String?
  createdAt       DateTime @default(now())
  houseNo         String?
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nerarestBusstop String?
  postalCode      Int?
  state           String?
  updatedAt       DateTime @updatedAt
  users           User[]   @relation(fields: [usersIds], references: [id])
  usersIds        String[] @db.ObjectId
}

model Wishlist {
  createdAt     DateTime        @default(now())
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt     DateTime        @updatedAt
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?         @db.ObjectId
  wishlistItems WishlistItems[]
}

model WishlistItems {
  apparels   Apparel[]
  createdAt  DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt  DateTime  @updatedAt
  wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  wishlistId String?   @db.ObjectId
}

model Model {
  apparels        Apparel[]      @relation(fields: [apparelsIds], references: [id])
  apparelsIds     String[]       @db.ObjectId
  createdAt       DateTime       @default(now())
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  modelFile       String?
  modelProperties ModelProperty?
  updatedAt       DateTime       @updatedAt
}

model ModelProperty {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  models    Model?   @relation(fields: [modelsId], references: [id])
  modelsId  String?  @unique @db.ObjectId
  updatedAt DateTime @updatedAt
}

model Size {
  apparel       Apparel?     @relation(fields: [apparelId], references: [id])
  apparelId     String?      @db.ObjectId
  apparelType   ApparelType? @relation(fields: [apparelTypeId], references: [id])
  apparelTypeId String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  measurements  Json?
  updatedAt     DateTime     @updatedAt
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?      @db.ObjectId
}

model Measurement {
  createdAt    DateTime    @default(now())
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  sizingUnit   SizingUnit? @relation(fields: [sizingUnitId], references: [id])
  sizingUnitId String?     @db.ObjectId
  updatedAt    DateTime    @updatedAt
  value        Int?
}

model SizingUnit {
  createdAt    DateTime      @default(now())
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  measurements Measurement[]
  name         String?
  updatedAt    DateTime      @updatedAt
}
